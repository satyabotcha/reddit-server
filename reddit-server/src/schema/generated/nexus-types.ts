/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { MyContext } from "./../../types"
import { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"


declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PostWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
  VoteType: -1 | 1
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  FieldError: { // root type
    field?: string | null; // String
    message?: string | null; // String
  }
  Mutation: {};
  PaginatedPosts: { // root type
    hasMore?: boolean | null; // Boolean
    posts?: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  Post: { // root type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    points: number; // Int!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: number; // Int!
  }
  Query: {};
  Upvotes: { // root type
    postId: number; // Int!
    userId: number; // Int!
    value: number; // Int!
  }
  User: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    username: string; // String!
  }
  UserResponse: { // root type
    errors?: NexusGenRootTypes['FieldError'] | null; // FieldError
    user?: NexusGenRootTypes['User'] | null; // User
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  FieldError: { // field return type
    field: string | null; // String
    message: string | null; // String
  }
  Mutation: { // field return type
    createPost: NexusGenRootTypes['Post'] | null; // Post
    createUser: NexusGenRootTypes['UserResponse'] | null; // UserResponse
    deletePost: boolean | null; // Boolean
    forgotPassword: boolean | null; // Boolean
    loginUser: NexusGenRootTypes['UserResponse'] | null; // UserResponse
    logoutUser: boolean | null; // Boolean
    resetPassword: NexusGenRootTypes['UserResponse'] | null; // UserResponse
    updatePost: NexusGenRootTypes['Post'] | null; // Post
    votePost: boolean | null; // Boolean
  }
  PaginatedPosts: { // field return type
    hasMore: boolean | null; // Boolean
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  Post: { // field return type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['User']; // User!
    id: number; // Int!
    points: number; // Int!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: number; // Int!
    voteStatus: number | null; // Int
  }
  Query: { // field return type
    hello: string; // String!
    me: NexusGenRootTypes['User'] | null; // User
    PaginatedPosts: NexusGenRootTypes['PaginatedPosts'] | null; // PaginatedPosts
    post: NexusGenRootTypes['Post'] | null; // Post
  }
  Upvotes: { // field return type
    post: NexusGenRootTypes['Post']; // Post!
    postId: number; // Int!
    user: NexusGenRootTypes['User']; // User!
    userId: number; // Int!
    value: number; // Int!
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: number; // Int!
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    username: string; // String!
  }
  UserResponse: { // field return type
    errors: NexusGenRootTypes['FieldError'] | null; // FieldError
    user: NexusGenRootTypes['User'] | null; // User
  }
}

export interface NexusGenFieldTypeNames {
  FieldError: { // field return type name
    field: 'String'
    message: 'String'
  }
  Mutation: { // field return type name
    createPost: 'Post'
    createUser: 'UserResponse'
    deletePost: 'Boolean'
    forgotPassword: 'Boolean'
    loginUser: 'UserResponse'
    logoutUser: 'Boolean'
    resetPassword: 'UserResponse'
    updatePost: 'Post'
    votePost: 'Boolean'
  }
  PaginatedPosts: { // field return type name
    hasMore: 'Boolean'
    posts: 'Post'
  }
  Post: { // field return type name
    content: 'String'
    createdAt: 'DateTime'
    creator: 'User'
    id: 'Int'
    points: 'Int'
    title: 'String'
    updatedAt: 'DateTime'
    userId: 'Int'
    voteStatus: 'Int'
  }
  Query: { // field return type name
    hello: 'String'
    me: 'User'
    PaginatedPosts: 'PaginatedPosts'
    post: 'Post'
  }
  Upvotes: { // field return type name
    post: 'Post'
    postId: 'Int'
    user: 'User'
    userId: 'Int'
    value: 'Int'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    id: 'Int'
    posts: 'Post'
    updatedAt: 'DateTime'
    username: 'String'
  }
  UserResponse: { // field return type name
    errors: 'FieldError'
    user: 'User'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createPost: { // args
      content: string; // String!
      title: string; // String!
    }
    createUser: { // args
      email: string; // String!
      password: string; // String!
      username: string; // String!
    }
    deletePost: { // args
      id: number; // Int!
    }
    forgotPassword: { // args
      email: string; // String!
    }
    loginUser: { // args
      email: string; // String!
      password: string; // String!
    }
    resetPassword: { // args
      newPassword: string; // String!
      token: string; // String!
    }
    updatePost: { // args
      content: string; // String!
      id: number; // Int!
      title: string; // String!
    }
    votePost: { // args
      postId: number; // Int!
      vote: NexusGenEnums['VoteType']; // VoteType!
    }
  }
  Query: {
    PaginatedPosts: { // args
      cursor?: number | null; // Int
      take: number; // Int!
    }
    post: { // args
      id: number; // Int!
    }
  }
  User: {
    posts: { // args
      after?: NexusGenInputs['PostWhereUniqueInput'] | null; // PostWhereUniqueInput
      before?: NexusGenInputs['PostWhereUniqueInput'] | null; // PostWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: MyContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}